non-blocking : nodejs의 특성임. SJF와 비슷한 개념

http://111.111.111.111:8080 이런식으로 ip주소와 포트번호를 입력하면 타 컴퓨터에서 내 컴퓨터로 접속이 가능.

server.js 만들고 npm init -y
npm install express로 express 다운
nodemon 다운 : npm install -g nodemon


restAPI
1. 일관성있는 url이 좋다. , 하나의url+method는 하나의 데이터를 보내야 한다.
2. 유저에게 서버 역할을 맏기지 마라
3. 요청들은 서로 의존성이 없어야
4. 요청은 캐싱이 가능해야 한다.


삭제기능 정리
1. 새로고침없이 서버로 요청날리고 싶으면 AJAX 사용 
2. AJAX로 데이터도 가져올 수 있다보니까 클라이언트사이드 렌더링 가능
3. dataset 이용하면 html에 몰래 데이터 숨겨놓을 수 있음


1. Session방식이란?
유저가 입장권에 sessionid만 보냄
유저가 get이나 post요청 시 입장권 제시
db에서 조회함, 그 document에 아무런 이상이 없으면 통과
장점 : db를 요청마다 조회하기 때문에 엄격한 로그인 상태 체크가 가능하다
단점 : db조회를 많이하기 때문에 부담이 심함

흐름
    1. 로그인 성공하면 세션 document만들기
       쿠키를 유저에게 보내주기->passport.serializeUser()쓰면 자동임
    2. 유저가 쿠키 제출시 확인해보기 -->passport.deserializeUser()
    3. 현재 로그인된 유저정보 출력은 요청.user






2. JWT token방식 
유저자 로그인을 성공하면 유저에게 입장권을 발급해줌(아이디, 로그인날짜, 유효기간 등)
get, post요청 시 입장권 제출, 별 이상 없으면 통과
유저가 입장권을 위조한다면? -> 위조여부는 쉽게 알 수 있으므로 상관 없음

장점 : 유저가 많은 마이크로서비스 운영중이면 편함
단점 : 입장권을 다른사람이 훔쳐가면 그 사람이 로그인하는 것을 막을 수 없음

3. Oauth(소셜로그인)
A사이트회원 정보를 B사이트에서 사용



비밀번호를 해싱할 때 row하게 전체를 해싱하는것보다 salt라는 임의의 추가 문자를 더하여 해싱하면 더 안정적임

ex)sanggyeol1abc123 -> 해싱
여기서 sanggyeol1은 pw, abc123은 salt이다.
salt를 쓰면 lookup table attack 과 rainbow table attack을 방어할 수 있다.

환경변수를 다른 파일에 보관하려면?
npm install dotenv 설치, 
require('dotenv').config()//환경변수 다른 파일에 저장
.env파일 생성(env파일은 깃허브에 올리지 말자.)

